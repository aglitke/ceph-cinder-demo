if ARGV.first == "up" && ENV['USING_KUBE_SCRIPTS'] != 'true'
  raise Vagrant::Errors::VagrantError.new, <<END
Calling 'vagrant up' directly is not supported.  Instead, please run the following:

  make cluster-up
END
end

$config = Hash[*File.read('hack/config-default.sh').split(/=|\n/)]
$vagrant_pool = (ENV['VAGRANT_POOL'] unless
                  (ENV['VAGRANT_POOL'].nil? or ENV['VAGRANT_POOL'].empty?))

$libvirt_prefix = "cnvdemo"
$master_ip = "192.168.231.2"
$nodes = 2
$network_provider = "weave"

$common_setup = <<SCRIPT
#!/bin/bash
set -xe
sed -i -e "s/PasswordAuthentication no/PasswordAuthentication yes/" /etc/ssh/sshd_config
systemctl restart sshd
# FIXME, sometimes eth1 does not come up on Vagrant on latest fc26
sudo ifup eth1
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "centos7"
  config.vm.box_url = "http://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1608_01.LibVirt.box"

  config.vm.provider :libvirt do |domain|
        domain.cpus = 2
        domain.nested = true  # enable nested virtualization
        domain.cpu_mode = "host-model"

        if $vagrant_pool then
            domain.storage_pool_name = $vagrant_pool
        end
        domain.default_prefix = $libvirt_prefix
  end

  # Vagrant seems to insist on using NFS sometimes even when explicitly
  # configured to use `rsync`, this prevents that
  config.nfs.functional = false
  config.vm.synced_folder "./", "/vagrant", type: "rsync",
    rsync__exclude: [
      "cluster/vagrant/.kubectl", "cluster/vagrant/.kubeconfig", ".vagrant",
      "vendor", ".git", ".data"
    ],
    rsync__args: ["--archive", "--delete"]

  config.vm.provision "shell", inline: $common_setup

  config.vm.define "master" do |master|
        master.vm.hostname = "master"
        master.vm.network "private_network", ip: "#{$master_ip}", libvirt__network_name: $libvirt_prefix + "0"
        master.vm.provider :libvirt do |domain|
            domain.memory = 3000
        end

        master.vm.provision "shell" do |s|
          s.path = "cluster/setup_master.sh"
          s.args = ["#{$master_ip}", "#{$nodes}", "#{$network_provider}"]
        end
  end

  (0..($nodes-1)).each do |suffix|
      config.vm.define "node" + suffix.to_s do |node|
          node.vm.hostname = "node" + suffix.to_s
          node_ip = $master_ip[0..-2] + ($master_ip[-1].to_i + 1 + suffix).to_s
          node.vm.network "private_network", ip: node_ip, libvirt__network_name: $libvirt_prefix + "0"

          node.vm.provider :libvirt do |domain|
            domain.memory = 2048
          end

          node.vm.provision "shell" do |s|
            s.path = "cluster/setup_node.sh"
            s.args = ["#{$master_ip}", "#{$nodes}"]
          end
      end
  end
end
